<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>这是第四篇文章</title>
      <link href="/2023/01/31/2/"/>
      <url>/2023/01/31/2/</url>
      
        <content type="html"><![CDATA[<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3>]]></content>
      
      
      <categories>
          
          <category> Data Struct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是第一篇文章</title>
      <link href="/2023/01/29/test/"/>
      <url>/2023/01/29/test/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇测试文章"><a href="#这是我的第一篇测试文章" class="headerlink" title="这是我的第一篇测试文章"></a>这是我的第一篇测试文章</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是第二篇文章</title>
      <link href="/2023/01/29/test1/"/>
      <url>/2023/01/29/test1/</url>
      
        <content type="html"><![CDATA[<h2 id="第二篇文章"><a href="#第二篇文章" class="headerlink" title="第二篇文章"></a>第二篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随记</title>
      <link href="/2023/01/29/%E9%9A%8F%E8%AE%B0/"/>
      <url>/2023/01/29/%E9%9A%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="随记"><a href="#随记" class="headerlink" title="随记"></a>随记</h1><ol><li><p>Java增强for循环</p><blockquote><p>for(数据类型  变量名 : 数组或者集合对象){<br>    &#x2F;&#x2F;循环体，变量即元素<br>}</p><p>注意：<br>增强for的底层依赖的是迭代器。<br>也就是说增强for就是迭代器的简写形式。<br>下边我们通过案例演示一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &gt;//需求通过增强for遍历list集合。</span><br><span class="line">  &gt;public static void main(String[]args)&#123;</span><br><span class="line">//复习一下如何创建List集合</span><br><span class="line">//1.创建元素对象</span><br><span class="line">List list = new ArrayList();</span><br><span class="line">//添加元素</span><br><span class="line">list.add(10);</span><br><span class="line">list.add(20);</span><br><span class="line">list.add(30);</span><br><span class="line">list.add(40);</span><br><span class="line">list.add(50);</span><br><span class="line">//遍历集合</span><br><span class="line">for(Object obj : list )&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">  &gt;&#125;//结果： 10，20，30，40，50</span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote></blockquote></li><li><blockquote><pre><code class="java">均数调用decimalFormat.format(sum/num)方法，即可求得保留两位小数的平均数decimalFormat.format(sum/n)   DecimalFormat decimalFormat = new DecimalFormat(&quot;0.00&quot;);格式化小数，保留两位小数。平均数调用decimalFormat.format(sum/num)方法，即可求得保留两位小数的平均数注意：两个int变量相除会向下取整，精度缺失，且不保留小数，所以这里声明sum为double类型，会自动把除得的结果想大的数类型转换。double(10.0) / int(4) = double(2.5)int(10) / int(4) = 2<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">4. **取余问题**</span><br><span class="line"></span><br><span class="line">  &gt;+ **顺序取数 除法/-去掉尾数**</span><br><span class="line"></span><br><span class="line">  &gt;&gt;①去掉最后4位数字（即取首数）：</span><br><span class="line">  &gt;&gt;12345 /10000=1.××××</span><br><span class="line"></span><br><span class="line">  &gt;&gt;②去掉最后3位数字（即取前两位）：</span><br><span class="line">  &gt;&gt;&gt;12345 / 1000=12.××××</span><br><span class="line"></span><br><span class="line">  &gt;&gt;③去掉最后2位数字（即取前三位）：</span><br><span class="line">  &gt;&gt;&gt;12345 / 100=123.××××</span><br><span class="line"></span><br><span class="line">  &gt;&gt;④去掉最后1位数字（即取前四位）：</span><br><span class="line">  &gt;&gt;&gt;12345 / 10=1234.××××</span><br><span class="line"></span><br></pre></td></tr></table></figure>&gt;&gt;注意：其实你可以看成：&gt;去掉后面4位，&gt;去掉后面3位，&gt;去掉后面2位，&gt;去掉后面1位，&gt;int a=12345 / 10000 ;//取最前一位/去掉后面4位：结果：a=1&gt;int a=12345 / 1000 ;//取最前二位/去掉后面3位：结果：a=12&gt;int a=12345 / 100 ;//取最前三位/去掉后面2位：结果：a=123&gt;int a=12345 / 10 ;//取最前四位/去掉后面1位：结果：a=1234&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;+ **取余得思想 逆序取数**</span><br><span class="line"></span><br><span class="line">&gt;&gt;①取尾数：12345%10=5</span><br><span class="line"></span><br><span class="line">&gt;&gt;② 取 后 两 位 ： 12345 % 100 = 45 ②取后两位：12345 \% 100=45②取后两位：12345%100=45</span><br><span class="line"></span><br><span class="line">&gt;&gt;③ 取 后 三 位 ： 12345 % 1000 = 345 ③取后三位：12345 \% 1000=345③取后三位：12345%1000=345</span><br><span class="line"></span><br><span class="line">&gt;&gt;④ 取 后 四 位 ： 12345 % 10000 = 2345 ④取后四位：12345 \% 10000=2345④取后四位：12345%10000=2345</span><br><span class="line"></span><br></pre></td></tr></table></figure>&gt;&gt;int a=12345 % 10000 ;//取后四位：结果：a=2345&gt;int a=12345 % 1000 ;//取后三位：结果：a=345&gt;int a=12345 % 100 ;//取后两位：结果：a=45&gt;int a=12345 &amp; 10 ;//取后一位：结果：a=5&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;取任意位置上得操作方法</span><br><span class="line"></span><br><span class="line">&gt;&gt;**第一种方法：先顺序取数(/)再逆序取数**</span><br><span class="line"></span><br></pre></td></tr></table></figure>&gt;&gt;&gt; 1.取首位 ：12345  / 10000=1（第一位）&gt;&gt; 2.顺序取第二位：分为两步：12345 / 1000=12；12%10=2（第二位）&gt;&gt;&gt; ——连起来写：12345 / 1000 %10=2（第二位）&gt;&gt; 3.顺序取第三位：分为两步：12345 / 100=123；123%10=3（第三位）&gt;&gt;&gt; ——连起来写：12345 / 100 %10=3（第三位）&gt;&gt; 4.顺序取第四位：分为两步：12345 / 10=1234；1234%10=4（第四位）&gt;&gt;&gt; ——连起来写：12345 / 10 %10=4（第四位）&gt;&gt; 5.顺序取第五位：分为两步：12345 / 1=12345；12345%10=5（第五位）&gt;&gt;&gt; ——连起来写：12345 / 1 %10=5（第五位）&gt;&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>&gt;//int a = 9899/1000;//千位&gt;//int b = 9899/100%10;//百位&gt;//int c = 9899/10%10;//十位&gt;//int d = 9899%1000%10;//个位&gt;//System.out.println(a);9&gt;//System.out.println(b);8&gt;//System.out.println(c);9&gt;//System.out.println(d);9&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">5. **闰年问题**</span><br><span class="line"></span><br><span class="line">  &gt;闰年能被4整除但不能被100整除||能被100整除且被400整除</span><br><span class="line"></span><br><span class="line">6. **split函数**</span><br><span class="line"></span><br><span class="line">  &gt;Java中的 split 函数是用于按指定字符（串）或正则去**分割**某个字符串，结果以**字符串数组**形式返回。</span><br><span class="line"></span><br><span class="line">  &gt;- 一个参数：代表根据什么来分（**这个必须位于字符串里面**）</span><br><span class="line">  &gt;- 两个参数：第一个代表**根据什么**来分割，第二个代表**分成几份**，分完之后**后面的不在继续分**</span><br><span class="line">  &gt;- 如果想根据多个字符来分，用 **|** 隔开（所以要注意当本来就要用这个来分割的情况，见后面）</span><br><span class="line"></span><br><span class="line">  &gt;```java</span><br><span class="line">  &gt;public static void main(String[] args) &#123;</span><br><span class="line">       String str=&quot;12@34@56&amp;ab@c&quot;;</span><br><span class="line">     </span><br><span class="line">       String[] a = str.split(&quot;@&quot;);//根据&#x27;@&#x27;来分</span><br><span class="line">       for(String x:a)</span><br><span class="line">           System.out.println(x);// 输出12   34   56&amp;ab  c</span><br><span class="line">           </span><br><span class="line">       String[] b=str.split(&quot;@&quot;,3);//根据&#x27;@&#x27;来分，分成3份</span><br><span class="line">       for(String x:b)</span><br><span class="line">           System.out.println(x);//输出12   34  56&amp;ab@c</span><br><span class="line">           </span><br><span class="line">       String [] c=str.split(&quot;!&quot;);//若原字符串没有这个，则输出原字符串</span><br><span class="line">       for(String x:c)</span><br><span class="line">           System.out.println(x);//输出12@34@56&amp;ab@c</span><br><span class="line">           </span><br><span class="line">       String [] d=str.split(&quot;@|&amp;&quot;);//如果既想用@，又想用&amp;，则用|隔开</span><br><span class="line">       for (String x:d)</span><br><span class="line">           System.out.println(x);//输出12  34  56  ab  c</span><br><span class="line">   </span><br><span class="line">   String arr=&quot;abcd&quot;;</span><br><span class="line">   String[] e = arr.split(&quot;&quot;);//每一个字符都分</span><br><span class="line">   for(String x:e)</span><br><span class="line">           System.out.println(x);// 输出a b c d</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>1、如果用**“.”**作为分隔的话,必须是如下写法,`String.split(&quot;\\.&quot;)`,这样才能正确的分隔开,不能用`String.split(&quot;.&quot;)`2、如果用“|”作为分隔的话,必须是如下写法,`String.split(&quot;\\|&quot;)`,这样才能正确的分隔开,不能用`String.split(&quot;|&quot;)`;**“.”和“|”都是转义字符,必须得加&quot;\\&quot;;**</code></pre></blockquote></li><li><p><strong><code>Interger.parselnt</code></strong></p><blockquote><ul><li>将数字字符串转化成原生整型的数据，属于<code>java.lang.Integer</code>，是原生类型整型的包裹类</li></ul><p> <strong>1. <code>parseInt(String s)</code></strong><br> 将字符串s转换为十进制的数字，默认为十进制.</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> num=Integer.parseInt(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p> <strong><code>2.parseInt(String s,int radix)</code></strong><br> radix代表转换的进制,不写默认为十进制.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int num=Integer.parseInt(&quot;100&quot;,16);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组和队列</title>
      <link href="/2023/01/25/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/2023/01/25/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="稀疏数组和队列"><a href="#稀疏数组和队列" class="headerlink" title="稀疏数组和队列"></a>稀疏数组和队列</h1><blockquote><ol><li><p>算法是程序的灵魂，优秀的程序可以在海量数据计算时，依然保持高速计算 </p></li><li><p>一般来讲 程序会使用了内存计算框架(比如 Spark)和缓存技术(比如 Redis 等)来优化程序,再深入的思考一下，这 些计算框架和缓存技术， 它的核心功能是哪个部分呢？ </p></li><li><p>拿实际工作经历来说, 在 Unix 下开发服务器程序，功能是要支持上千万人同时在线，在上线前做内测，一切OK,可上线后，服务器就支撑不住了, 公司的 CTO 对代码进行优化，再次上线，坚如磐石。你就能感受到程序是有灵魂的，就是算法。 </p></li><li><p>目前程序员面试的门槛越来越高，很多一线 IT 公司(大厂)，都会有数据结构和算法面试题(负责的告诉你，肯定有的) </p></li><li><p>如果你不想永远都是代码工人,那就花时间来研究下数据结构和算法。</p></li></ol></blockquote><h2 id="一、数据结构与算法概述以及经典题目举例"><a href="#一、数据结构与算法概述以及经典题目举例" class="headerlink" title="一、数据结构与算法概述以及经典题目举例"></a>一、数据结构与算法概述以及经典题目举例</h2><h3 id="1、数据结构和算法的关系"><a href="#1、数据结构和算法的关系" class="headerlink" title="1、数据结构和算法的关系"></a>1、数据结构和算法的关系</h3><blockquote><ol><li><p>数据 data 结构(structure)是一门研究组织数据方式的学科，有了编程语言也就有了数据结构.学好数据结构可以 编写出更加漂亮,更加有效率的代码。 </p></li><li><p>要学习好数据结构就要多多考虑如何将生活中遇到的问题,用程序去实现解决. </p></li><li><p>程序&#x3D;算法+数据结构</p></li><li><p>数据结构是算法的基础, 换言之，想要学好算法，需要把数据结构学到位。</p></li></ol></blockquote><h3 id="2、线性结构与非线性结构"><a href="#2、线性结构与非线性结构" class="headerlink" title="2、线性结构与非线性结构"></a>2、线性结构与非线性结构</h3><blockquote><p>数据结构包括：线性结构和非线性结构。</p></blockquote><h4 id="Ⅰ-线性结构"><a href="#Ⅰ-线性结构" class="headerlink" title="Ⅰ-线性结构"></a>Ⅰ-线性结构</h4><blockquote><ol><li><p>线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系 </p></li><li><p>线性结构有两种不同的存储结构，即顺序存储结构(数组)和链式存储结构(链表)。顺序存储的线性表称为顺序 表，顺序表中的存储元素是连续的 </p></li><li><p>链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地 址信息 </p></li><li><p>线性结构常见的有：数组、队列、链表和栈</p></li></ol></blockquote><h4 id="Ⅱ-非线性结构"><a href="#Ⅱ-非线性结构" class="headerlink" title="Ⅱ-非线性结构"></a>Ⅱ-非线性结构</h4><blockquote><p>非线性结构包括：二维数组，多维数组，广义表，树结构，图结构</p></blockquote><h2 id="二、稀疏数组和队列"><a href="#二、稀疏数组和队列" class="headerlink" title="二、稀疏数组和队列"></a>二、稀疏数组和队列</h2><h3 id="1、稀疏-sparsearray-数组"><a href="#1、稀疏-sparsearray-数组" class="headerlink" title="1、稀疏 sparsearray 数组"></a>1、稀疏 sparsearray 数组</h3><h4 id="1-1-稀疏数组的实际需求"><a href="#1-1-稀疏数组的实际需求" class="headerlink" title="1.1 稀疏数组的实际需求"></a>1.1 稀疏数组的实际需求</h4><blockquote><p>需求举例:编写的五子棋程序中，有存盘退出和续上盘的功能.</p><p><img src="https://cdn.staticaly.com/gh/Qccovo/pic-bed@main/img/%E5%AE%9E%E9%99%85%E9%9C%80%E6%B1%82.png" alt="实际需求"></p><p>分析:因为该二维数组的很多值是默认值 0, 因此记录了<code>很多没有意义的数据.-&gt;稀疏数组</code>。</p></blockquote><h4 id="1-2-稀疏数组的介绍"><a href="#1-2-稀疏数组的介绍" class="headerlink" title="1.2 稀疏数组的介绍"></a>1.2 稀疏数组的介绍</h4><blockquote><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。 </p><p>稀疏数组的处理方法是: </p><ol><li><p>记录数组一共有<strong>几行几列，有多少个不同</strong>的值 </p></li><li><p>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而<strong>缩小程序的规模</strong></p></li></ol><p><img src="https://cdn.staticaly.com/gh/Qccovo/pic-bed@main/img/image-20221218173429890.png" alt="image-20221218173429890"></p></blockquote><h4 id="1-3-稀疏数组的应用实例"><a href="#1-3-稀疏数组的应用实例" class="headerlink" title="1.3 稀疏数组的应用实例"></a>1.3 稀疏数组的应用实例</h4><blockquote><p>1）使用稀疏数组，来保留类似前面的二维数组（棋盘，地图等等）</p><p>2）把稀疏数组存盘，并且可以重新恢复原来的二维数组</p><p>3）整体思路分析</p><p><img src="https://cdn.staticaly.com/gh/Qccovo/pic-bed@main/img/image-20221218175156764.png" alt="image-20221218175156764"></p></blockquote><blockquote><p><strong>二维数组转稀疏数组的思路</strong></p><ol><li><p>遍历原始的二维数组，得到有效数据的个数sum</p></li><li><p>根据sum就可以创建稀疏数组<code>sparseArr int [sum+1][3]</code></p></li><li><p>将二维数组的有效数据存入到稀疏数组中</p></li></ol><p><strong>稀疏数组转原始的二维数组思路</strong></p><ol><li>先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的 <code>chessArr2=int[11][11]</code></li><li>在读取稀疏数组的后几行数据，并赋给原始 的二维数组即可。</li></ol></blockquote><h4 id="1-4-稀疏数组的代码实现"><a href="#1-4-稀疏数组的代码实现" class="headerlink" title="1.4 稀疏数组的代码实现"></a>1.4 稀疏数组的代码实现</h4><blockquote><p><strong>创建一个二维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个原始的数组11*11 </span></span><br><span class="line"><span class="comment">// 0: 表示没有棋子 1:表示黑子 2:表示蓝子</span></span><br><span class="line"><span class="type">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出原有的二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> []row: chessArr1)&#123;<span class="comment">//获取每一行的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> data: row)&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d\t&quot;</span>,data);<span class="comment">//换取每一个值</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println( );<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二维数组转为稀疏数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历整个二维数组，得到非0的数据个数</span></span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;chessArr1.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;chessArr1.length;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j]!=<span class="number">0</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据sum的值来创建稀疏数组</span></span><br><span class="line"><span class="type">int</span> sparseArr[][]= <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>]=chessArr1.length;<span class="comment">//row</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>]=chessArr1.length;<span class="comment">//col</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>]=sum;<span class="comment">// val</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历稀疏数组 把非0值存放到sparseArr中</span></span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;<span class="comment">//计数器 用于记录是第几个非0数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;chessArr1.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;chessArr1.length;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j]!=<span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>]= i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>]= j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>]= chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出稀疏数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sparseArr.length;i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d\t%d\t%d\t\n&quot;</span>,sparseArr[i][<span class="number">0</span>],sparseArr[i][<span class="number">1</span>],sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将稀疏数组–&gt;原始数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组</span></span><br><span class="line"><span class="type">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//在读取稀疏数组的后几行数据(从第二行开始)，并赋给原始的二维数组即可。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;sparseArr.length;i++) &#123;</span><br><span class="line">chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]]=sparseArr[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印恢复后的数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> []row: chessArr2)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> data: row)&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d\t&quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println( );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><p><img src="https://cdn.staticaly.com/gh/Qccovo/pic-bed@main/img/result.jpg" alt="result"></p></blockquote><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2.队列"></a>2.队列</h3><h4 id="2-1-队列的一个使用场景"><a href="#2-1-队列的一个使用场景" class="headerlink" title="2.1 队列的一个使用场景"></a>2.1 队列的一个使用场景</h4><blockquote><p>银行排队的案例：</p><p><img src="https://cdn.staticaly.com/gh/Qccovo/pic-bed@main/img/%E6%A1%88%E4%BE%8B.jpg" alt="案例"></p></blockquote><h4 id="2-2队列的介绍"><a href="#2-2队列的介绍" class="headerlink" title="2.2队列的介绍"></a>2.2队列的介绍</h4><blockquote><ol><li><p>队列是一个<strong>有序的列表</strong>，可以用<strong>数组</strong>或者<strong>链表</strong>来实现</p></li><li><p>队列遵循<strong>先入先出</strong>的原则 。即：<strong>先存入队列的数据，要先取出。后存入的数据后取出</strong>。</p></li><li><p>示意图：</p></li></ol><p><img src="https://cdn.staticaly.com/gh/Qccovo/pic-bed@main/img/image-20221221161419388.png" alt="image-20221221161419388"></p></blockquote><h4 id="2-3-数组模拟队列思路"><a href="#2-3-数组模拟队列思路" class="headerlink" title="2.3 数组模拟队列思路"></a>2.3 数组模拟队列思路</h4><blockquote><ul><li><p>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如上图, 其中 maxSize 是该队列的最大容量。</p></li><li><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个变量 front 及 rear 分别记录队列前后端的下标， front 会随着数据输出而改变，而 rear 则是随着数据输入而改变，队列介绍如上图所示.</p></li><li><p>当我们将数据存入队列时称为<code>addQueue</code>，<code>addQueue</code> 的处理需要有两个步骤：思路分析:</p></li></ul><blockquote><p>1）将尾指针往后移：rear+1，当front&#x3D;&#x3D;rear 【空】</p><p>2）若尾指针 rear 小于队列的最大下标 <code>maxSize-1</code>，则将数据存入 rear 所指的数组元素中，否则无法存入数据。<code>rear==maxSize-1</code>[队列满]</p></blockquote><ul><li>代码示例</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qx.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueueDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建一个队列</span></span><br><span class="line"><span class="type">ArrayQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayQueue</span>(<span class="number">3</span>);</span><br><span class="line"><span class="type">char</span> key=<span class="string">&#x27; &#x27;</span>;<span class="comment">//接收用户的输入值</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;s(show):显示队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;e(exit):退出程序&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;g(get):从队列取出数据&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;h(head):查看队列头的数据&quot;</span>);</span><br><span class="line">key = sc.next().charAt(<span class="number">0</span>);<span class="comment">//接受一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">queue.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">queue.addQueue(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.getQueue();</span><br><span class="line">System.out.printf(<span class="string">&quot;取出的数据是%d\n&quot;</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getMessage();<span class="comment">//只会获得异常的名称</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.headQueue();</span><br><span class="line">System.out.printf(<span class="string">&quot;队列头的数据是%d\n&quot;</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">sc.close();</span><br><span class="line">loop=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;程序退出&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayQueue</span>&#123; </span><br><span class="line"><span class="keyword">private</span><span class="type">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> front;<span class="comment">//队列头</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> rear;<span class="comment">//队列尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[]arr;<span class="comment">//该数组用于存放数据，模拟队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建队列的构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> arrMaxSize)</span> &#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[arrMaxSize];</span><br><span class="line">front = -<span class="number">1</span>;<span class="comment">//指向队列的头部,分析出front是指向队列头的前一个位置</span></span><br><span class="line">rear = -<span class="number">1</span>;<span class="comment">//指向队列尾,指向队列尾的数据(即就是队列的最后一个数据)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear==maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rear==front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列满，不能加入数据~&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">rear++;<span class="comment">//让rear后移</span></span><br><span class="line">arr[rear]=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取队列的数据出队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，不能获取数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">front++;<span class="comment">//front初始为-1 后移一位</span></span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列的所有数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列为空，没有数据&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列的头数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，没有数据~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>问题分析并优化</li></ul><blockquote><ol><li>目前数组使用一次就不能用，没有达到复用的效果。</li><li>将这个数组使用算法，该进成一个环形的队列 <strong>取模：%</strong></li></ol></blockquote></blockquote><h4 id="2-4-数组模拟循环队列"><a href="#2-4-数组模拟循环队列" class="headerlink" title="2.4 数组模拟循环队列"></a>2.4 数组模拟循环队列</h4><blockquote><ul><li>对前面的数组模拟队列的优化，充分利用数组. 因此将数组看做是一个环形的。(通过取模的方式来实现即可)</li></ul><blockquote><ol><li>尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定,这个在做判断队列满的时候需要注意 <code>(rear + 1) % maxSize == front</code> [满]</li><li>rear &#x3D;&#x3D; front [空]</li><li>测试示意图:</li></ol><p><img src="https://cdn.staticaly.com/gh/Qccovo/pic-bed@main/img/image-20221222151155848.png" alt="image-20221222151155848"></p></blockquote><ul><li>队列有效数据个数为<code>(rear+maxSize-front)%maxSize</code>的理解</li></ul><blockquote><ol><li>当rear在front之<strong>后</strong>(这里指的是数组（环形队列）中索引位的前后，并非逻辑上的前后)，有效数据个数&#x3D;<code>rear-front=(rear+maxSize-front)%maxSize</code></li><li>当rear在front之<strong>前</strong>(这里指的是数组（环形队列）中索引位的前后，并非逻辑上的前后)，有效数据个数&#x3D;<code>(rear+maxSize-front)%maxSize</code></li></ol></blockquote><ul><li>代码实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.qx.queue;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleQueueDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">CircleQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleQueue</span>(<span class="number">4</span>);<span class="comment">//设置4其实有效数据长度只有3 因为要留有置空位</span></span><br><span class="line"><span class="type">char</span> key=<span class="string">&#x27; &#x27;</span>;<span class="comment">//接收用户的输入值</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;s(show):显示队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;e(exit):退出程序&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;g(get):从队列取出数据&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;h(head):查看队列头的数据&quot;</span>);</span><br><span class="line">key = sc.next().charAt(<span class="number">0</span>);<span class="comment">//接受一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">queue.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">queue.addQueue(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.getQueue();</span><br><span class="line">System.out.printf(<span class="string">&quot;取出的数据是%d\n&quot;</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getMessage();<span class="comment">//只会获得异常的名称</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.headQueue();</span><br><span class="line">System.out.printf(<span class="string">&quot;队列头的数据是%d\n&quot;</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">sc.close();</span><br><span class="line">loop=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;程序退出&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">CircleQueue</span>&#123; </span><br><span class="line"><span class="keyword">private</span><span class="type">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> front;<span class="comment">//队列头</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> rear;<span class="comment">//队列尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[]arr;<span class="comment">//该数组用于存放数据，模拟队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建队列的构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CircleQueue</span><span class="params">(<span class="type">int</span> arrMaxSize)</span> &#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[arrMaxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear+<span class="number">1</span>)%maxSize==front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rear==front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">// 判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列满，不能加入数据~&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[rear] = n;<span class="comment">//直接将数据加入</span></span><br><span class="line">rear=(rear+<span class="number">1</span>)%maxSize;<span class="comment">//rear后移 考虑取模</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取队列的数据出队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，不能获取数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先把front存入到一个临时变量 然后将front后移  再把临时保存的变量返回</span></span><br><span class="line"><span class="type">int</span> value=arr[front];</span><br><span class="line">front=(front+<span class="number">1</span>)%maxSize;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列的所有数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列为空，没有数据&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从front开始遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=front;i&lt;front+size();i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i%maxSize,arr[i%maxSize]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列的有效数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>  <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (rear+maxSize-front)%maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列的头数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，没有数据~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Data Struct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
